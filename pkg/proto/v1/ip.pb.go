// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/ip.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IP_Type int32

const (
	IP_STATIC    IP_Type = 0
	IP_EPHEMERAL IP_Type = 1
)

var IP_Type_name = map[int32]string{
	0: "STATIC",
	1: "EPHEMERAL",
}

var IP_Type_value = map[string]int32{
	"STATIC":    0,
	"EPHEMERAL": 1,
}

func (x IP_Type) String() string {
	return proto.EnumName(IP_Type_name, int32(x))
}

func (IP_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{0, 0}
}

type IP struct {
	Common               *Common                 `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	ProjectID            string                  `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	NetworkID            string                  `protobuf:"bytes,3,opt,name=networkID,proto3" json:"networkID,omitempty"`
	Type                 IP_Type                 `protobuf:"varint,4,opt,name=type,proto3,enum=v1.IP_Type" json:"type,omitempty"`
	Tags                 []*wrappers.StringValue `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IP) Reset()         { *m = IP{} }
func (m *IP) String() string { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()    {}
func (*IP) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{0}
}

func (m *IP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IP.Unmarshal(m, b)
}
func (m *IP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IP.Marshal(b, m, deterministic)
}
func (m *IP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IP.Merge(m, src)
}
func (m *IP) XXX_Size() int {
	return xxx_messageInfo_IP.Size(m)
}
func (m *IP) XXX_DiscardUnknown() {
	xxx_messageInfo_IP.DiscardUnknown(m)
}

var xxx_messageInfo_IP proto.InternalMessageInfo

func (m *IP) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *IP) GetProjectID() string {
	if m != nil {
		return m.ProjectID
	}
	return ""
}

func (m *IP) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *IP) GetType() IP_Type {
	if m != nil {
		return m.Type
	}
	return IP_STATIC
}

func (m *IP) GetTags() []*wrappers.StringValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

type IPIdentifiable struct {
	IPAddress            string   `protobuf:"bytes,1,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPIdentifiable) Reset()         { *m = IPIdentifiable{} }
func (m *IPIdentifiable) String() string { return proto.CompactTextString(m) }
func (*IPIdentifiable) ProtoMessage()    {}
func (*IPIdentifiable) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{1}
}

func (m *IPIdentifiable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPIdentifiable.Unmarshal(m, b)
}
func (m *IPIdentifiable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPIdentifiable.Marshal(b, m, deterministic)
}
func (m *IPIdentifiable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPIdentifiable.Merge(m, src)
}
func (m *IPIdentifiable) XXX_Size() int {
	return xxx_messageInfo_IPIdentifiable.Size(m)
}
func (m *IPIdentifiable) XXX_DiscardUnknown() {
	xxx_messageInfo_IPIdentifiable.DiscardUnknown(m)
}

var xxx_messageInfo_IPIdentifiable proto.InternalMessageInfo

func (m *IPIdentifiable) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

type IPAllocateRequest struct {
	IP                   *IP                   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	MachineID            *wrappers.StringValue `protobuf:"bytes,2,opt,name=machineID,proto3" json:"machineID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IPAllocateRequest) Reset()         { *m = IPAllocateRequest{} }
func (m *IPAllocateRequest) String() string { return proto.CompactTextString(m) }
func (*IPAllocateRequest) ProtoMessage()    {}
func (*IPAllocateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{2}
}

func (m *IPAllocateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPAllocateRequest.Unmarshal(m, b)
}
func (m *IPAllocateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPAllocateRequest.Marshal(b, m, deterministic)
}
func (m *IPAllocateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAllocateRequest.Merge(m, src)
}
func (m *IPAllocateRequest) XXX_Size() int {
	return xxx_messageInfo_IPAllocateRequest.Size(m)
}
func (m *IPAllocateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAllocateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPAllocateRequest proto.InternalMessageInfo

func (m *IPAllocateRequest) GetIP() *IP {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *IPAllocateRequest) GetMachineID() *wrappers.StringValue {
	if m != nil {
		return m.MachineID
	}
	return nil
}

type IPUpdateRequest struct {
	Common               *Common                 `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Identifiable         *IPIdentifiable         `protobuf:"bytes,2,opt,name=identifiable,proto3" json:"identifiable,omitempty"`
	Type                 IP_Type                 `protobuf:"varint,3,opt,name=type,proto3,enum=v1.IP_Type" json:"type,omitempty"`
	Tags                 []*wrappers.StringValue `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IPUpdateRequest) Reset()         { *m = IPUpdateRequest{} }
func (m *IPUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*IPUpdateRequest) ProtoMessage()    {}
func (*IPUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{3}
}

func (m *IPUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPUpdateRequest.Unmarshal(m, b)
}
func (m *IPUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPUpdateRequest.Marshal(b, m, deterministic)
}
func (m *IPUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPUpdateRequest.Merge(m, src)
}
func (m *IPUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_IPUpdateRequest.Size(m)
}
func (m *IPUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPUpdateRequest proto.InternalMessageInfo

func (m *IPUpdateRequest) GetCommon() *Common {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *IPUpdateRequest) GetIdentifiable() *IPIdentifiable {
	if m != nil {
		return m.Identifiable
	}
	return nil
}

func (m *IPUpdateRequest) GetType() IP_Type {
	if m != nil {
		return m.Type
	}
	return IP_STATIC
}

func (m *IPUpdateRequest) GetTags() []*wrappers.StringValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

type IPDeleteRequest struct {
	Identifiable         *Identifiable `protobuf:"bytes,1,opt,name=identifiable,proto3" json:"identifiable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IPDeleteRequest) Reset()         { *m = IPDeleteRequest{} }
func (m *IPDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*IPDeleteRequest) ProtoMessage()    {}
func (*IPDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{4}
}

func (m *IPDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPDeleteRequest.Unmarshal(m, b)
}
func (m *IPDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPDeleteRequest.Marshal(b, m, deterministic)
}
func (m *IPDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPDeleteRequest.Merge(m, src)
}
func (m *IPDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_IPDeleteRequest.Size(m)
}
func (m *IPDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPDeleteRequest proto.InternalMessageInfo

func (m *IPDeleteRequest) GetIdentifiable() *Identifiable {
	if m != nil {
		return m.Identifiable
	}
	return nil
}

type IPGetRequest struct {
	Identifiable         *Identifiable `protobuf:"bytes,1,opt,name=identifiable,proto3" json:"identifiable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IPGetRequest) Reset()         { *m = IPGetRequest{} }
func (m *IPGetRequest) String() string { return proto.CompactTextString(m) }
func (*IPGetRequest) ProtoMessage()    {}
func (*IPGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{5}
}

func (m *IPGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPGetRequest.Unmarshal(m, b)
}
func (m *IPGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPGetRequest.Marshal(b, m, deterministic)
}
func (m *IPGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPGetRequest.Merge(m, src)
}
func (m *IPGetRequest) XXX_Size() int {
	return xxx_messageInfo_IPGetRequest.Size(m)
}
func (m *IPGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPGetRequest proto.InternalMessageInfo

func (m *IPGetRequest) GetIdentifiable() *Identifiable {
	if m != nil {
		return m.Identifiable
	}
	return nil
}

type IPFindRequest struct {
	IPAddress            *wrappers.StringValue   `protobuf:"bytes,1,opt,name=IPAddress,json=ipaddress,proto3" json:"IPAddress,omitempty"`
	ParentPrefixCidr     *wrappers.StringValue   `protobuf:"bytes,2,opt,name=ParentPrefixCidr,json=networkprefix,proto3" json:"ParentPrefixCidr,omitempty"`
	NetworkID            *wrappers.StringValue   `protobuf:"bytes,3,opt,name=NetworkID,json=networkid,proto3" json:"NetworkID,omitempty"`
	Tags                 []*wrappers.StringValue `protobuf:"bytes,4,rep,name=Tags,json=tags,proto3" json:"Tags,omitempty"`
	ProjectID            *wrappers.StringValue   `protobuf:"bytes,5,opt,name=ProjectID,json=projectid,proto3" json:"ProjectID,omitempty"`
	Type                 *wrappers.StringValue   `protobuf:"bytes,6,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	MachineID            *wrappers.StringValue   `protobuf:"bytes,7,opt,name=MachineID,json=machineid,proto3" json:"MachineID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IPFindRequest) Reset()         { *m = IPFindRequest{} }
func (m *IPFindRequest) String() string { return proto.CompactTextString(m) }
func (*IPFindRequest) ProtoMessage()    {}
func (*IPFindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{6}
}

func (m *IPFindRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPFindRequest.Unmarshal(m, b)
}
func (m *IPFindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPFindRequest.Marshal(b, m, deterministic)
}
func (m *IPFindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPFindRequest.Merge(m, src)
}
func (m *IPFindRequest) XXX_Size() int {
	return xxx_messageInfo_IPFindRequest.Size(m)
}
func (m *IPFindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPFindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPFindRequest proto.InternalMessageInfo

func (m *IPFindRequest) GetIPAddress() *wrappers.StringValue {
	if m != nil {
		return m.IPAddress
	}
	return nil
}

func (m *IPFindRequest) GetParentPrefixCidr() *wrappers.StringValue {
	if m != nil {
		return m.ParentPrefixCidr
	}
	return nil
}

func (m *IPFindRequest) GetNetworkID() *wrappers.StringValue {
	if m != nil {
		return m.NetworkID
	}
	return nil
}

func (m *IPFindRequest) GetTags() []*wrappers.StringValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *IPFindRequest) GetProjectID() *wrappers.StringValue {
	if m != nil {
		return m.ProjectID
	}
	return nil
}

func (m *IPFindRequest) GetType() *wrappers.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *IPFindRequest) GetMachineID() *wrappers.StringValue {
	if m != nil {
		return m.MachineID
	}
	return nil
}

type IPListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPListRequest) Reset()         { *m = IPListRequest{} }
func (m *IPListRequest) String() string { return proto.CompactTextString(m) }
func (*IPListRequest) ProtoMessage()    {}
func (*IPListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{7}
}

func (m *IPListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPListRequest.Unmarshal(m, b)
}
func (m *IPListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPListRequest.Marshal(b, m, deterministic)
}
func (m *IPListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPListRequest.Merge(m, src)
}
func (m *IPListRequest) XXX_Size() int {
	return xxx_messageInfo_IPListRequest.Size(m)
}
func (m *IPListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IPListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IPListRequest proto.InternalMessageInfo

type IPResponse struct {
	IP                   *IP             `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Identifiable         *IPIdentifiable `protobuf:"bytes,2,opt,name=identifiable,proto3" json:"identifiable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IPResponse) Reset()         { *m = IPResponse{} }
func (m *IPResponse) String() string { return proto.CompactTextString(m) }
func (*IPResponse) ProtoMessage()    {}
func (*IPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{8}
}

func (m *IPResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPResponse.Unmarshal(m, b)
}
func (m *IPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPResponse.Marshal(b, m, deterministic)
}
func (m *IPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPResponse.Merge(m, src)
}
func (m *IPResponse) XXX_Size() int {
	return xxx_messageInfo_IPResponse.Size(m)
}
func (m *IPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IPResponse proto.InternalMessageInfo

func (m *IPResponse) GetIP() *IP {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *IPResponse) GetIdentifiable() *IPIdentifiable {
	if m != nil {
		return m.Identifiable
	}
	return nil
}

type IPListResponse struct {
	Ips                  []*IP    `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPListResponse) Reset()         { *m = IPListResponse{} }
func (m *IPListResponse) String() string { return proto.CompactTextString(m) }
func (*IPListResponse) ProtoMessage()    {}
func (*IPListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff53b684f2612dc, []int{9}
}

func (m *IPListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPListResponse.Unmarshal(m, b)
}
func (m *IPListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPListResponse.Marshal(b, m, deterministic)
}
func (m *IPListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPListResponse.Merge(m, src)
}
func (m *IPListResponse) XXX_Size() int {
	return xxx_messageInfo_IPListResponse.Size(m)
}
func (m *IPListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IPListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IPListResponse proto.InternalMessageInfo

func (m *IPListResponse) GetIps() []*IP {
	if m != nil {
		return m.Ips
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.IP_Type", IP_Type_name, IP_Type_value)
	proto.RegisterType((*IP)(nil), "v1.IP")
	proto.RegisterType((*IPIdentifiable)(nil), "v1.IPIdentifiable")
	proto.RegisterType((*IPAllocateRequest)(nil), "v1.IPAllocateRequest")
	proto.RegisterType((*IPUpdateRequest)(nil), "v1.IPUpdateRequest")
	proto.RegisterType((*IPDeleteRequest)(nil), "v1.IPDeleteRequest")
	proto.RegisterType((*IPGetRequest)(nil), "v1.IPGetRequest")
	proto.RegisterType((*IPFindRequest)(nil), "v1.IPFindRequest")
	proto.RegisterType((*IPListRequest)(nil), "v1.IPListRequest")
	proto.RegisterType((*IPResponse)(nil), "v1.IPResponse")
	proto.RegisterType((*IPListResponse)(nil), "v1.IPListResponse")
}

func init() { proto.RegisterFile("v1/ip.proto", fileDescriptor_bff53b684f2612dc) }

var fileDescriptor_bff53b684f2612dc = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xbe, 0x8e, 0xdd, 0xdc, 0x9b, 0x93, 0xfe, 0xa4, 0x73, 0xd5, 0xab, 0x28, 0xaa, 0x2e, 0xc1,
	0x1b, 0x22, 0xa4, 0xd8, 0x24, 0x20, 0x16, 0xdd, 0x85, 0x26, 0x14, 0x4b, 0x2d, 0x1a, 0xb9, 0x81,
	0x05, 0x62, 0xe3, 0xd8, 0x53, 0x77, 0xa8, 0x63, 0x0f, 0xf6, 0x24, 0xa5, 0xcf, 0xc3, 0x8e, 0xa7,
	0xe0, 0x39, 0x78, 0x1a, 0x34, 0x9e, 0x71, 0xe2, 0x94, 0x56, 0x49, 0x61, 0x17, 0x9f, 0xff, 0xf3,
	0x7d, 0xe7, 0x9b, 0x40, 0x7d, 0xde, 0xb3, 0x29, 0xb3, 0x58, 0x9a, 0xf0, 0x04, 0x55, 0xe6, 0xbd,
	0xd6, 0xde, 0xbc, 0x67, 0xfb, 0xc9, 0x74, 0x9a, 0xc4, 0xd2, 0xd8, 0x3a, 0x10, 0x11, 0x01, 0x89,
	0x39, 0xbd, 0xa0, 0xde, 0x24, 0x22, 0xca, 0xfc, 0x7f, 0x98, 0x24, 0x61, 0x44, 0xec, 0xfc, 0x6b,
	0x32, 0xbb, 0xb0, 0xaf, 0x53, 0x8f, 0x31, 0x92, 0x66, 0xd2, 0x6f, 0xfe, 0xd0, 0xa0, 0xe2, 0x60,
	0x64, 0x42, 0x55, 0x56, 0x6b, 0x6a, 0x6d, 0xad, 0x53, 0xef, 0x83, 0x35, 0xef, 0x59, 0xc7, 0xb9,
	0xc5, 0x55, 0x1e, 0x74, 0x08, 0x35, 0x96, 0x26, 0x9f, 0x88, 0xcf, 0x9d, 0x61, 0xb3, 0xd2, 0xd6,
	0x3a, 0x35, 0x77, 0x69, 0x10, 0xde, 0x98, 0xf0, 0xeb, 0x24, 0xbd, 0x72, 0x86, 0x4d, 0x5d, 0x7a,
	0x17, 0x06, 0xf4, 0x08, 0x0c, 0x7e, 0xc3, 0x48, 0xd3, 0x68, 0x6b, 0x9d, 0xdd, 0x7e, 0x5d, 0x54,
	0x77, 0xb0, 0x35, 0xbe, 0x61, 0xc4, 0xcd, 0x1d, 0xe8, 0x19, 0x18, 0xdc, 0x0b, 0xb3, 0xe6, 0x56,
	0x5b, 0xef, 0xd4, 0xfb, 0x87, 0x96, 0x1c, 0xdb, 0x2a, 0xc6, 0xb6, 0xce, 0x79, 0x4a, 0xe3, 0xf0,
	0xbd, 0x17, 0xcd, 0x44, 0x86, 0x17, 0x66, 0xe6, 0x63, 0x30, 0x44, 0x3e, 0x02, 0xa8, 0x9e, 0x8f,
	0x07, 0x63, 0xe7, 0xb8, 0xf1, 0x17, 0xda, 0x81, 0xda, 0x08, 0xbf, 0x19, 0x9d, 0x8d, 0xdc, 0xc1,
	0x69, 0x43, 0x33, 0x2d, 0xd8, 0x75, 0xb0, 0x53, 0x02, 0x45, 0x4c, 0xe9, 0xe0, 0x41, 0x10, 0xa4,
	0x24, 0xcb, 0xf2, 0x55, 0x6b, 0xee, 0xd2, 0x60, 0x86, 0xb0, 0xef, 0xe0, 0x41, 0x14, 0x25, 0xbe,
	0xc7, 0x89, 0x4b, 0x3e, 0xcf, 0x48, 0xc6, 0xd1, 0x7f, 0x02, 0x20, 0x05, 0x4b, 0x55, 0x0e, 0xee,
	0x0a, 0xc8, 0x8e, 0xa0, 0x36, 0xf5, 0xfc, 0x4b, 0x1a, 0x13, 0x05, 0xc7, 0xba, 0xb1, 0x97, 0xe1,
	0xe6, 0x77, 0x0d, 0xf6, 0x1c, 0xfc, 0x8e, 0x05, 0xa5, 0x3e, 0x9b, 0x50, 0xf0, 0x12, 0xb6, 0xcb,
	0x1c, 0xab, 0xb6, 0x48, 0x4e, 0x55, 0x5e, 0xd4, 0x5d, 0x89, 0x5b, 0xc0, 0xaf, 0xaf, 0x83, 0xdf,
	0xd8, 0x18, 0xfe, 0x13, 0xb1, 0xc1, 0x90, 0x44, 0x64, 0xb9, 0xc1, 0x8b, 0x5b, 0xd3, 0xc9, 0x3d,
	0x1a, 0x79, 0xb7, 0x7b, 0x67, 0x33, 0x87, 0xb0, 0xed, 0xe0, 0x13, 0xc2, 0xff, 0xac, 0xca, 0x37,
	0x1d, 0x76, 0x1c, 0xfc, 0x9a, 0xc6, 0x41, 0x51, 0xe7, 0xe8, 0x36, 0xd5, 0x6b, 0xf9, 0xa1, 0xcc,
	0x93, 0xe1, 0x68, 0x04, 0x0d, 0xec, 0xa5, 0x24, 0xe6, 0x38, 0x25, 0x17, 0xf4, 0xcb, 0x31, 0x0d,
	0xd2, 0x8d, 0x28, 0xde, 0x51, 0x17, 0xcf, 0xf2, 0x34, 0x31, 0xc2, 0xdb, 0x15, 0x4d, 0xac, 0x1d,
	0x41, 0xe5, 0xd3, 0x40, 0x30, 0x32, 0x7e, 0x10, 0x23, 0xa2, 0x1b, 0x5e, 0xe8, 0x73, 0x6b, 0x93,
	0x6e, 0x4a, 0xbd, 0xaa, 0x9b, 0x38, 0x90, 0xea, 0x06, 0x69, 0xf2, 0x62, 0x8e, 0xa0, 0x76, 0xb6,
	0x38, 0xff, 0xbf, 0x1f, 0x70, 0xfe, 0x34, 0x30, 0xf7, 0x04, 0x57, 0xa7, 0x34, 0x2b, 0x38, 0x37,
	0x3f, 0x02, 0x38, 0xd8, 0x25, 0x19, 0x4b, 0xe2, 0x8c, 0xdc, 0xab, 0xb8, 0xdf, 0xbc, 0x7e, 0xf3,
	0xa9, 0x78, 0x06, 0x64, 0x3b, 0xd5, 0xa1, 0x09, 0x3a, 0x65, 0xe2, 0x2a, 0xf4, 0x52, 0x0b, 0x61,
	0xea, 0x7f, 0xad, 0x88, 0xb3, 0x39, 0x27, 0xe9, 0x9c, 0xfa, 0x04, 0xf5, 0xe0, 0x9f, 0xe2, 0x39,
	0x40, 0x07, 0x32, 0xec, 0xd6, 0xf3, 0xd0, 0xda, 0x55, 0xd9, 0x45, 0xe9, 0x2e, 0x54, 0xa5, 0xae,
	0xd1, 0xbf, 0xd2, 0xb3, 0xa2, 0xf2, 0xbb, 0xc2, 0xa5, 0x88, 0x8a, 0xf0, 0x15, 0x49, 0xfd, 0x12,
	0xfe, 0x04, 0xf4, 0x13, 0xc2, 0x91, 0x54, 0x43, 0x49, 0x35, 0x77, 0xd4, 0x35, 0x84, 0x18, 0xd0,
	0xbe, 0xb4, 0x97, 0x84, 0xd1, 0x52, 0x80, 0xad, 0x00, 0xd2, 0x05, 0x43, 0x7c, 0x17, 0xe1, 0x25,
	0x6e, 0xee, 0x0a, 0x7f, 0x65, 0x7f, 0xe8, 0x86, 0x94, 0x5f, 0xce, 0x26, 0x96, 0x9f, 0x4c, 0xed,
	0x29, 0xe1, 0x5e, 0xd4, 0xcd, 0xb8, 0xe7, 0x5f, 0xa9, 0xdf, 0x1e, 0xa3, 0x36, 0xbb, 0x0a, 0xe5,
	0xbf, 0x8e, 0x3d, 0xef, 0x4d, 0xaa, 0xf9, 0xaf, 0xe7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x21,
	0x52, 0x49, 0x3d, 0xc8, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IPServiceClient is the client API for IPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPServiceClient interface {
	//    rpc Create(IPCreateRequest) returns (IPResponse);
	Allocate(ctx context.Context, in *IPAllocateRequest, opts ...grpc.CallOption) (*IPResponse, error)
	Update(ctx context.Context, in *IPUpdateRequest, opts ...grpc.CallOption) (*IPResponse, error)
	Delete(ctx context.Context, in *IPDeleteRequest, opts ...grpc.CallOption) (*IPResponse, error)
	Get(ctx context.Context, in *IPGetRequest, opts ...grpc.CallOption) (*IPResponse, error)
	Find(ctx context.Context, in *IPFindRequest, opts ...grpc.CallOption) (*IPListResponse, error)
	List(ctx context.Context, in *IPListRequest, opts ...grpc.CallOption) (*IPListResponse, error)
}

type iPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPServiceClient(cc grpc.ClientConnInterface) IPServiceClient {
	return &iPServiceClient{cc}
}

func (c *iPServiceClient) Allocate(ctx context.Context, in *IPAllocateRequest, opts ...grpc.CallOption) (*IPResponse, error) {
	out := new(IPResponse)
	err := c.cc.Invoke(ctx, "/v1.IPService/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceClient) Update(ctx context.Context, in *IPUpdateRequest, opts ...grpc.CallOption) (*IPResponse, error) {
	out := new(IPResponse)
	err := c.cc.Invoke(ctx, "/v1.IPService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceClient) Delete(ctx context.Context, in *IPDeleteRequest, opts ...grpc.CallOption) (*IPResponse, error) {
	out := new(IPResponse)
	err := c.cc.Invoke(ctx, "/v1.IPService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceClient) Get(ctx context.Context, in *IPGetRequest, opts ...grpc.CallOption) (*IPResponse, error) {
	out := new(IPResponse)
	err := c.cc.Invoke(ctx, "/v1.IPService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceClient) Find(ctx context.Context, in *IPFindRequest, opts ...grpc.CallOption) (*IPListResponse, error) {
	out := new(IPListResponse)
	err := c.cc.Invoke(ctx, "/v1.IPService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceClient) List(ctx context.Context, in *IPListRequest, opts ...grpc.CallOption) (*IPListResponse, error) {
	out := new(IPListResponse)
	err := c.cc.Invoke(ctx, "/v1.IPService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPServiceServer is the server API for IPService service.
type IPServiceServer interface {
	//    rpc Create(IPCreateRequest) returns (IPResponse);
	Allocate(context.Context, *IPAllocateRequest) (*IPResponse, error)
	Update(context.Context, *IPUpdateRequest) (*IPResponse, error)
	Delete(context.Context, *IPDeleteRequest) (*IPResponse, error)
	Get(context.Context, *IPGetRequest) (*IPResponse, error)
	Find(context.Context, *IPFindRequest) (*IPListResponse, error)
	List(context.Context, *IPListRequest) (*IPListResponse, error)
}

// UnimplementedIPServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIPServiceServer struct {
}

func (*UnimplementedIPServiceServer) Allocate(ctx context.Context, req *IPAllocateRequest) (*IPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (*UnimplementedIPServiceServer) Update(ctx context.Context, req *IPUpdateRequest) (*IPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedIPServiceServer) Delete(ctx context.Context, req *IPDeleteRequest) (*IPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedIPServiceServer) Get(ctx context.Context, req *IPGetRequest) (*IPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedIPServiceServer) Find(ctx context.Context, req *IPFindRequest) (*IPListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedIPServiceServer) List(ctx context.Context, req *IPListRequest) (*IPListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterIPServiceServer(s *grpc.Server, srv IPServiceServer) {
	s.RegisterService(&_IPService_serviceDesc, srv)
}

func _IPService_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPService/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Allocate(ctx, req.(*IPAllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Update(ctx, req.(*IPUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Delete(ctx, req.(*IPDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Get(ctx, req.(*IPGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).Find(ctx, req.(*IPFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceServer).List(ctx, req.(*IPListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.IPService",
	HandlerType: (*IPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _IPService_Allocate_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IPService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IPService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IPService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _IPService_Find_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IPService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ip.proto",
}

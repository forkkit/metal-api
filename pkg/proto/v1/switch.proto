syntax = "proto3";

option go_package = "github.com/metal-stack/metal-api/pkg/proto/v1";

package v1;

import "v1/common.proto";
import "v1/partition.proto";
import "v1/identifiable.proto";
import "google/protobuf/wrappers.proto";

service SwitchService {
//    rpc Create(SwitchCreateRequest) returns (SwitchResponse);
//    rpc Update(SwitchUpdateRequest) returns (SwitchResponse);
    rpc Update(SwitchRegisterRequest) returns (SwitchResponse);
//    rpc Delete(SwitchDeleteRequest) returns (SwitchResponse);
    rpc Get(SwitchGetRequest) returns (SwitchResponse);
    rpc Find(SwitchFindRequest) returns (SwitchListResponse);
    rpc List(SwitchListRequest) returns (SwitchListResponse);
}

message BGPFilter {
    repeated string CIDRs = 1;                     // the cidr addresses that are allowed to be announced at this switch port
	repeated google.protobuf.StringValue VNIs = 2; // the virtual networks that are exposed at this switch port
}

message SwitchNic {
    string macAddress = 1;               // the mac address of this network interface
	string name = 2;                     // the name of this network interface
	google.protobuf.StringValue vrf = 3; // the vrf this network interface is part of
	BGPFilter BGPFilter = 4;             // configures the bgp filter applied at the switch port
}

message SwitchConnection {
	SwitchNic nic = 1;                            // a network interface on the switch
	google.protobuf.StringValue machineID = 2; // the machine id of the machine connected to the nic
}

// A switch that can register at the api
message Switch {
    v1.Common common = 1;
    string rackID = 2; // the id of the rack in which this switch is located
    repeated SwitchNic nics = 3; // the list of network interfaces on the switch
}

//message SwitchCreateRequest {
//    Switch switch = 1;
//}
//
//message SwitchUpdateRequest {
//    Switch switch = 1;
//}

message SwitchRegisterRequest {
    Switch switch = 1;
    string partitionID = 2; // the partition in which this switch is located
}

//message SwitchDeleteRequest {
//    v1.Identifiable identifiable = 1;
//}

message SwitchGetRequest {
    v1.Identifiable identifiable = 1;
}

message SwitchFindRequest {
    v1.FindCriteria findCriteria = 1;
}

message SwitchResponse {
    Switch switch = 1;
    repeated SwitchConnection connections = 2; // a connection between a switch port and a machine
    v1.PartitionResponse partitionResponse = 3;           // the partition in which this switch is located
}

message SwitchListRequest {}

message SwitchListResponse {
    repeated SwitchResponse switches = 1;
}

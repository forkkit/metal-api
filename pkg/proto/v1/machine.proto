syntax = "proto3";

option go_package = "github.com/metal-stack/metal-api/pkg/proto/v1";

package v1;

import "v1/common.proto";
import "v1/identifiable.proto";
import "v1/image.proto";
import "v1/partition.proto";
import "v1/size.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service MachineService {
    rpc Get (MachineGetRequest) returns (MachineResponse);
    rpc Find (MachineFindRequest) returns (MachineListResponse);
    rpc List (MachineListRequest) returns (MachineListResponse);
    rpc IPMIReport (MachineIPMIReportRequest) returns (MachineIPMIReportResponse);
    rpc Update (MachineUpdateRequest) returns (MachineResponse);
    rpc Delete (MachineDeleteRequest) returns (MachineResponse);
}

message MachineSetup {
    string primaryDisk = 1;  // device name of the disk that contains the partition on which the OS is installed
    string osPartition = 2;  // device name of disk partition that has the OS installed
    string initrd = 3;       // the initrd image
    string cmdline = 4;      // the cmdline
    string kernel = 5;       // the kernel
    string bootloaderID = 6; // the bootloader ID
}

message MachineReinstall {
    string oldImageID = 1;   // the ID of the already existing OS image
    MachineSetup setup = 2;  // the machine setup
}

message MachineNetwork { //TODO Reuse NetworkImmutable?
    string networkID = 1; // the networkID of the allocated machine in this vrf
    repeated string prefixes = 2; // the prefixes of this network
    repeated string IPs = 3; // the ip addresses of the allocated machine in this vrf
    uint64 vrf = 4; // the vrf of the allocated machine
    int64 ASN = 5; // ASN number for this network in the bgp configuration
    bool private = 6; // indicates whether this network is the private network of this machine
    bool nat = 7; // if set to true, packets leaving this network get masqueraded behind interface ip
    repeated string destinationPrefixes = 8; // prefixes that are reachable within this network
    bool underlay = 9; // if set to true, this network can be used for underlay communication
}

message MachineAllocation {
    google.protobuf.Timestamp Created = 1; // the time when the machine was created
    string name = 2; // the name of the machine
    google.protobuf.StringValue description = 3; // a description for this machine
    string projectID = 4; // the project id that this machine is assigned to
    v1.ImageResponse imageResponse = 5; // the image assigned to this machine //TODO readonly
    repeated MachineNetwork machineNetworks = 6; // the networks of this machine
    string hostname = 7; // the hostname which will be used when creating the machine
    repeated string sshPubKeys = 8; // the public ssh keys to access the machine with
    google.protobuf.StringValue userData = 9; // userdata to execute post installation tasks
    google.protobuf.StringValue consolePassword = 10; // the console password which was generated while provisioning
    bool succeeded = 11; // if the allocation of the machine was successful, this is set to true
    MachineReinstall reinstall = 12; // indicates whether to reinstall the machine (if not nil)
}

message MachineHardwareBase {
    uint64 memory = 1; // the total memory of the machine
    uint32 cpuCores = 2; // the number of cpu cores
    repeated MachineBlockDevice disks = 3; // the list of block devices of this machine
}

message MachineHardware {
    MachineHardwareBase base = 1;
    repeated MachineNic nics = 2; // the list of network interfaces of this machine
}

message MachineHardwareExtended {
    MachineHardwareBase base = 1;
    repeated MachineNicExtended nics = 2; // the list of network interfaces of this machine with extended information
}

message MachineState {
    string value = 1;       // the state of this machine. empty means available for all //TODO enum?
    string description = 2; // a description why this machine is in the given state
}

message ChassisIdentifyLEDState {
    string value = 1; // the state of this chassis identify LED. empty means LED-OFF //TODO enum?
    string description = 2; // a description why this chassis identify LED is in the given state
}

message MachineBlockDevice {
    string name = 1; // the name of this block device
    uint64 size = 2; // the size of this block device
    bool primary = 3; // whether this disk has the OS installed
    repeated MachineDiskPartition partitions = 4; // the partitions of this disk
}

message MachineRecentProvisioningEvents {
    repeated MachineProvisioningEvent events = 1; // the log of recent machine provisioning events
    google.protobuf.Timestamp lastEventTime = 2; // the time where the last event was received
    string incompleteProvisioningCycles = 3; // the amount of incomplete provisioning cycles in the event container
}

message MachineProvisioningEvent {
	google.protobuf.Timestamp time = 1; // the time that this event was received //TODO readonly
	string event = 2; // description:"the event emitted by the machine
	google.protobuf.StringValue message = 3; // an additional message to add to the event
}

message MachineLivelinessReport {
    uint32 aliveCount = 1;   // the number of machines alive
    uint32 deadCount = 2;    // the number of dead machines
    uint32 unknownCount = 3; // the number of machines with unknown liveliness
}

// The bios version
message MachineBIOS {
    string version = 1; // the bios version
    string vendor = 2;  // the bios vendor
    string date = 3;    // the bios date
}

// The IPMI connection data
message MachineIPMI {
    string address = 1;
    string macAddress = 2;
    string user = 3;
    string password = 4;
    string interface = 5;
    MachineFru fru = 6;
    string bmcVersion = 7;
}

// The Field Replaceable Unit data
message MachineFru {
	google.protobuf.StringValue chassisPartNumber = 1;   // the chassis part number
	google.protobuf.StringValue chassisPartSerial = 2;   // the chassis part serial
	google.protobuf.StringValue boardMfg = 3;            // the board mfg
	google.protobuf.StringValue boardMfgSerial = 4;      // the board mfg serial" optional:"tru
	google.protobuf.StringValue boardPartNumber = 5;     // the board part number
	google.protobuf.StringValue productManufacturer = 6; // the product manufacturer
	google.protobuf.StringValue productPartNumber = 7;   // the product part number
	google.protobuf.StringValue productSerial = 8;       // the product serial
}

message MachineRegisterRequest {
    string UUID = 1; // the product uuid of the machine to register
    string partitionID = 2; // the partition id to register this machine with
    string rackID = 3; // the rack id where this machine is connected to
    MachineHardwareExtended hardware = 4; // the hardware of this machine
    MachineBIOS BIOS = 5; // bios information of this machine
    MachineIPMI IPMI = 6; // the ipmi access infos
    repeated google.protobuf.StringValue tags = 7; // tags for this machine
}

message MachineAllocateRequest {
    v1.Common common = 1;
    google.protobuf.StringValue UUID = 2; // if this field is set, this specific machine will be allocated if it is not in available state and not currently allocated (overrules size and partition)
    google.protobuf.StringValue Hostname = 3; // the hostname for the allocated machine (defaults to metal)
	string projectID = 4; // the project id to assign this machine to
	string partitionID = 5; // the partition id to assign this machine to
	string sizeID = 6; // the size id to assign this machine to
	string imageID = 7; // the image id to assign this machine to
	google.protobuf.StringValue UserData = 8; // cloud-init.io compatible userdata must be base64 encoded
	repeated google.protobuf.StringValue Tags = 9; // tags for this machine
	repeated MachineAllocationNetwork networks = 10; // the networks that this machine will be placed in
	repeated google.protobuf.StringValue IPs = 11; // the ips to attach to this machine additionally
    repeated google.protobuf.StringValue SSHPubKeys = 99; // the public ssh keys to access the machine with //TODO move all sshpubkeys fields to last
}

message MachineAllocationNetwork {
    string networkID = 1; // the id of the network that this machine will be placed in
    google.protobuf.BoolValue autoAcquireIP = 2; // will automatically acquire an ip in this network if set to true (defaults to true)
}

message MachineDiskPartition {
    string label = 1; // the partition label
    string device = 2; // the partition device name, e.g. sda1
    uint32 number = 3; // the partition number
    string mountPoint = 4; // the partition mount point
    repeated string mountOptions = 5; // the partition mount options
    uint64 size = 6; // the partition size
    string filesystem = 7; // the partition filesystem
    string gptType = 8; // the partition GPT type
    string gptGuid = 9; // the partition GPT guid
    map<string, string> properties = 10; // the partition properties
    bool containsOS = 11; // whether the OS is installed on this partition or not
}

message MachineFinalizeAllocationRequest {
    string ConsolePassword = 1; // the console password which was generated while provisioning
    MachineSetup setup = 2;  // the machine setup
}

// MachineSearchQuery can be used to search machines.
message MachineSearchQuery {
    google.protobuf.StringValue ID = 1;
    google.protobuf.StringValue name = 2;
    google.protobuf.StringValue partitionID = 3;
    google.protobuf.StringValue sizeID = 4;
    google.protobuf.StringValue rackID = 5;
    google.protobuf.StringValue liveliness = 6;
    repeated google.protobuf.StringValue tags = 7;

    // allocation
    google.protobuf.StringValue allocationName = 12;
    google.protobuf.StringValue allocationProject = 13;
    google.protobuf.StringValue allocationImageID = 14;
    google.protobuf.StringValue allocationHostname = 15;
    google.protobuf.BoolValue allocationSucceeded = 16;

    // network
    repeated google.protobuf.StringValue networkIDs = 21;
    repeated google.protobuf.StringValue networkPrefixes = 22;
    repeated google.protobuf.StringValue networkIPs = 23;
    repeated google.protobuf.StringValue networkDestinationPrefixes = 24;
    repeated google.protobuf.Int64Value networkVrfs = 25;
    google.protobuf.BoolValue networkPrivate = 26;
    repeated google.protobuf.Int64Value networkASNs = 27;
    google.protobuf.BoolValue networkNat = 28;
    google.protobuf.BoolValue networkUnderlay = 29;

    // hardware
    google.protobuf.Int64Value hardwareMemory = 34;
    google.protobuf.Int64Value hardwareCPUCores = 35;

    // nics
    repeated google.protobuf.StringValue nicsMacAddresses = 40;
    repeated google.protobuf.StringValue nicsNames = 41;
    repeated google.protobuf.StringValue nicsVrfs = 42;
    repeated google.protobuf.StringValue nicsNeighborMacAddresses = 43;
    repeated google.protobuf.StringValue nicsNeighborNames = 44;
    repeated google.protobuf.StringValue nicsNeighborVrfs = 45;

    // disks
    repeated google.protobuf.StringValue diskNames = 50;
    repeated google.protobuf.Int64Value diskSizes = 51;

    // state
    google.protobuf.StringValue stateValue = 56;

    // ipmi
    google.protobuf.StringValue ipmiAddress = 61;
    google.protobuf.StringValue ipmiMacAddress = 62;
    google.protobuf.StringValue ipmiUser = 63;
    google.protobuf.StringValue ipmiInterface = 64;

    // fru
    google.protobuf.StringValue fruChassisPartNumber = 69;
    google.protobuf.StringValue fruChassisPartSerial = 70;
    google.protobuf.StringValue fruBoardMfg = 71;
    google.protobuf.StringValue fruBoardMfgSerial = 72;
    google.protobuf.StringValue fruBoardPartNumber = 73;
    google.protobuf.StringValue fruProductManufacturer = 74;
    google.protobuf.StringValue fruProductPartNumber = 75;
    google.protobuf.StringValue fruProductSerial = 76;
}

message MachineIPMIResponse {
    v1.Common common = 1;
    Machine machine = 2;
    MachineIPMI IPMI = 3; // ipmi information of this machine
}

message MachineIPMIReportRequest {
	string PartitionID = 1; // the partition id for the ipmi report
    map<string, string> activeLeases = 2; // the active leases to be reported by a management server
}

message MachineIPMIReportResponse {
    map<string, string> updatedLeases = 1; // the leases that triggered an update of ipmi data
    map<string, string> createdLeases = 2; // the leases that triggered a creation of a machine entity
}

message MachineReinstallRequest {
    v1.Common common = 1;
    string imageID = 2; // the image id to be installed
}

message MachineNic {
    string macAddress = 1; // the mac address of this network interface
    string name = 2; // the name of this network interface
}

message MachineNicExtended {
    MachineNic machineNic = 1;
    repeated MachineNicExtended neighbors = 2; // the neighbors visible to this network interface
}

// A machine representing a bare metal machine
message Machine {
    v1.Common common = 1;
    v1.PartitionResponse partitionResponse = 2; // the partition assigned to this machine //TODO readonly
    string rackID = 3; // the rack assigned to this machine //TODO readonly
    v1.SizeResponse sizeResponse = 4; // the size of this machine //TODO readonly
    MachineHardware hardware = 5; // the hardware of this machine
    MachineBIOS BIOS = 6; // bios information of this machine
    MachineAllocation allocation = 7; // the allocation data of an allocated machine
    MachineState state = 8; // the state of this machine
    ChassisIdentifyLEDState ledState = 9; // the state of this chassis identify LED
    string liveliness = 10; // the liveliness of this machine
    MachineRecentProvisioningEvents recentProvisioningEvents = 11; // recent events of this machine during provisioning
    repeated google.protobuf.StringValue tags = 12; // the tags for this machine
}

message MachineCreateRequest {
    Machine machine = 1;
}

message MachineUpdateRequest {
    Machine machine = 1;
}

message MachineDeleteRequest {
    v1.Identifiable identifiable = 1;
}

message MachineGetRequest {
    v1.Identifiable identifiable = 1;
}

message MachineFindRequest {
    MachineSearchQuery machineSearchQuery = 1;
}

message MachineResponse {
    v1.Common common = 1;
    Machine machine = 2;
}

message MachineListRequest {}

message MachineListResponse {
    repeated MachineResponse machines = 1;
}
